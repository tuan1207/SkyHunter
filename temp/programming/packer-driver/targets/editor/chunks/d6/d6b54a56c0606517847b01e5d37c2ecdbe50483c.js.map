{"version":3,"sources":["file:///D:/Cocos%20Creator/Sky-Hunter/NewProject/assets/scripts/GameCtrl.ts"],"names":["_decorator","Component","Prefab","instantiate","ccclass","property","GameCtrl","spawnFunc1","start","turnSpawn","update","deltaTime","randomWave1","availableFunctions","reduce","acc","spawned","index","push","length","randomIndex","Math","floor","random","i","enemyPre","enemyWave1","prefabInstance","parent","node","setWorldPosition","worldPosition","x","y","z","console","log"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAcC,MAAAA,W,OAAAA,W;;;;;;;;;OAC9C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;0BAGjBM,Q,WADZF,OAAO,CAAC,UAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,UAERG,QAAQ,CAACH,MAAD,C,UAERG,QAAQ,CAACH,MAAD,C,2BANb,MACaI,QADb,SAC8BL,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAO7BM,UAP6B,GAOhB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,CAPgB;AAAA;;AASpCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,SAAL;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEDC,QAAAA,WAAW,GAAE;AACT,cAAIC,kBAAkB,GAAG,KAAKN,UAAL,CAAgBO,MAAhB,CAAuB,CAACC,GAAD,EAAMC,OAAN,EAAeC,KAAf,KAAyB;AACrE,gBAAI,CAACD,OAAL,EAAcD,GAAG,CAACG,IAAJ,CAASD,KAAT;AACd,mBAAOF,GAAP;AACH,WAHwB,EAGtB,EAHsB,CAAzB;AAKA,cAAGF,kBAAkB,CAACM,MAAnB,KAA8B,CAAjC,EAAoC;AAEpC,cAAIC,WAAW,GAAGP,kBAAkB,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,kBAAkB,CAACM,MAA9C,CAAD,CAApC;AAEA,eAAKZ,UAAL,CAAgBa,WAAhB,IAAgC,IAAhC;;AAEA,kBAAOA,WAAP;AACI,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ,iBAAK,CAAL;AACI;;AACJ;AACI;AAtBR;AAwBH;;AAEDX,QAAAA,SAAS,GAAE;AACP,eAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,gBAAIC,QAAQ,GAAG,KAAKC,UAAL,CAAgBF,CAAhB,CAAf;AACA,gBAAIG,cAAc,GAAGxB,WAAW,CAACsB,QAAD,CAAhC;AACAE,YAAAA,cAAc,CAACC,MAAf,GAAwB,KAAKC,IAAL,CAAUD,MAAlC,CAHsB,CAItB;AACA;AACA;;AACAD,YAAAA,cAAc,CAACG,gBAAf,CAAgC,KAAKD,IAAL,CAAUE,aAAV,CAAwBC,CAAxD,EAA2D,KAAKH,IAAL,CAAUE,aAAV,CAAwBE,CAAxB,GAA0B,EAArF,EAAyF,KAAKJ,IAAL,CAAUE,aAAV,CAAwBG,CAAjH;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBT,cAAxB;AACH;AACJ;;AAlEmC,O;;;;;iBAEL,E;;;;;;;iBAEA,E;;;;;;;iBAEA,E","sourcesContent":["import { _decorator, Component, Node, Prefab, Vec3, instantiate } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameCtrl')\r\nexport class GameCtrl extends Component {\r\n    @property(Prefab)\r\n    public enemyWave1: Prefab [] = [];\r\n    @property(Prefab)\r\n    public enemyWave2: Prefab [] = [];\r\n    @property(Prefab)\r\n    public enemyWave3: Prefab [] = [];\r\n    public spawnFunc1 = [false, false, false, false, false, false, false, false, false, false];\r\n\r\n    start() {\r\n        this.turnSpawn();\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    \r\n    randomWave1(){\r\n        let availableFunctions = this.spawnFunc1.reduce((acc, spawned, index) => {\r\n            if (!spawned) acc.push(index);\r\n            return acc;\r\n        }, []);\r\n\r\n        if(availableFunctions.length === 0) return;\r\n\r\n        let randomIndex = availableFunctions[Math.floor(Math.random() * availableFunctions.length)];\r\n\r\n        this.spawnFunc1[randomIndex]  = true;\r\n\r\n        switch(randomIndex){\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                break;\r\n            case 3:\r\n                break;\r\n            case 4:\r\n                break;\r\n            case 5:\r\n                break;\r\n            case 6:\r\n                break;\r\n            case 7:\r\n                break;\r\n            case 8:\r\n                break;\r\n            case 9:\r\n                break;\r\n            case 0:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    turnSpawn(){\r\n        for(let i = 0; i < 5; i++){\r\n            let enemyPre = this.enemyWave1[i];\r\n            let prefabInstance = instantiate(enemyPre);\r\n            prefabInstance.parent = this.node.parent;\r\n            // if(i=0){\r\n            //     prefabInstance.setWorldPosition(this.node.worldPosition.x-100, this.node.worldPosition.y+60, this.node.worldPosition.z);\r\n            // }\r\n            prefabInstance.setWorldPosition(this.node.worldPosition.x, this.node.worldPosition.y+60, this.node.worldPosition.z);\r\n            console.log('da spawn', prefabInstance);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}