{"version":3,"sources":["file:///D:/Cocos%20Creator/Sky-Hunter/NewProject/assets/scripts/Boss.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","math","Vec3","tween","Prefab","instantiate","macro","Animation","GameCtrl","ccclass","property","Boss","randomPosition","bulletCont","maxHealth","currentHealth","listPos","start","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","moveRandom","schedule","spawnBullet","REPEAT_FOREVER","update","deltaTime","randomX","random","randomY","distance","node","position","duration","speed","to","call","selfCollider","otherCollider","contact","name","startsWith","scheduleOnce","push","updateHealthBar","length","destroy","instance","healthBar","active","i","listBulletB1","enemyPre","prefabInstance","parent","setWorldPosition","worldPosition","listBulletB3","j","endsWith","x","y","z","progress"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAA0BC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,S,OAAAA,S;;AAC1HC,MAAAA,Q,iBAAAA,Q;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;sBAGjBc,I,WADZF,OAAO,CAAC,MAAD,C,UAEHC,QAAQ,CAACN,MAAD,C,UAERM,QAAQ,CAACN,MAAD,C,UAERM,QAAQ,CAACH,SAAD,C,2BANb,MACaI,IADb,SAC0Bb,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eASzBc,cATyB;AAAA,eAUzBC,UAVyB,GAUZ,EAVY;AAAA,eAWzBC,SAXyB,GAWL,GAXK;AAAA,eAYzBC,aAZyB,GAYD,GAZC;AAAA,eAahCC,OAbgC,GAatB,CACN,IAAId,IAAJ,CAAS,GAAT,EAAc,GAAd,CADM,EACa;AACnB,cAAIA,IAAJ,CAAS,GAAT,EAAc,GAAd,CAFM,CAEa;AAFb,WAbsB;AAAA;;AAiBhCe,QAAAA,KAAK,GAAG;AACJ,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBpB,UAAlB,CAAf;;AACA,cAAImB,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAYpB,aAAa,CAACqB,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D;AACAJ,YAAAA,QAAQ,CAACE,EAAT,CAAYpB,aAAa,CAACuB,WAA1B,EAAuC,KAAKC,YAA5C,EAA0D,IAA1D;AACH;;AACD,eAAKC,UAAL;AACA,eAAKC,QAAL,CAAc,KAAKC,WAAnB,EAAgC,GAAhC,EAAqCrB,KAAK,CAACsB,cAA3C,EAA2D,CAA3D;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AACDL,QAAAA,UAAU,GAAG;AACT,gBAAMM,OAAO,GAAG9B,IAAI,CAAC+B,MAAL,MAAiB,IAAI,IAArB,IAA6B,GAA7C;AACA,gBAAMC,OAAO,GAAGhC,IAAI,CAAC+B,MAAL,MAAiB,MAAM,GAAvB,IAA8B,GAA9C;AACA,eAAKpB,cAAL,GAAsB,IAAIV,IAAJ,CAAS6B,OAAT,EAAkBE,OAAlB,CAAtB;AAEA,gBAAMC,QAAQ,GAAGhC,IAAI,CAACgC,QAAL,CAAc,KAAKC,IAAL,CAAUC,QAAxB,EAAkC,KAAKxB,cAAvC,CAAjB;AACA,gBAAMyB,QAAQ,GAAGH,QAAQ,GAAG,KAAKI,KAAjC;AAEAnC,UAAAA,KAAK,CAAC,KAAKgC,IAAN,CAAL,CACKI,EADL,CACQF,QADR,EACkB;AAAED,YAAAA,QAAQ,EAAE,KAAKxB;AAAjB,WADlB,EAEK4B,IAFL,CAEU,MAAM;AACR,iBAAKf,UAAL;AACH,WAJL,EAKKR,KALL;AAMH;;AACDK,QAAAA,cAAc,CAACmB,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAwF;AAClG,cAAGD,aAAa,CAACP,IAAd,CAAmBS,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,KAAgDH,aAAa,CAACP,IAAd,CAAmBS,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,CAAnD,EAAgG;AAC5F,iBAAKC,YAAL,CAAkB,MAAM;AAAC,mBAAKjC,UAAL,CAAgBkC,IAAhB,CAAqBL,aAArB;AAAoC,aAA7D;;AACA,gBAAG,KAAKP,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,mBAAK7B,aAAL,IAAsB,CAAtB;;AACA,kBAAI,KAAKA,aAAL,IAAsB,CAA1B,EAA6B;AACzB,qBAAKA,aAAL,GAAqB,CAArB;AACH;;AACD,mBAAKiC,eAAL;;AAEA,kBAAG,KAAKnC,UAAL,CAAgBoC,MAAhB,KAA2B,EAA9B,EAAiC;AAC7B,qBAAKH,YAAL,CAAkB,MAAM;AAACL,kBAAAA,YAAY,CAACN,IAAb,CAAkBe,OAAlB;AAA4B,iBAArD;AACA;AAAA;AAAA,0CAASC,QAAT,CAAkBC,SAAlB,CAA4B,CAA5B,EAA+BjB,IAA/B,CAAoCkB,MAApC,GAA6C,KAA7C;AACH;AACJ;;AACD,gBAAG,KAAKlB,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,kBAAG,KAAK/B,UAAL,CAAgBoC,MAAhB,KAA2B,GAA9B,EAAkC;AAC9B,qBAAKH,YAAL,CAAkB,MAAM;AAACL,kBAAAA,YAAY,CAACN,IAAb,CAAkBe,OAAlB;AAA4B,iBAArD;AACH;AACJ;;AACD,gBAAG,KAAKf,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,kBAAG,KAAK/B,UAAL,CAAgBoC,MAAhB,KAA2B,GAA9B,EAAkC;AAC9B,qBAAKH,YAAL,CAAkB,MAAM;AAACL,kBAAAA,YAAY,CAACN,IAAb,CAAkBe,OAAlB;AAA4B,iBAArD;AACH;AACJ;;AACD,iBAAKJ,YAAL,CAAkB,MAAM;AAACJ,cAAAA,aAAa,CAACP,IAAd,CAAmBe,OAAnB;AAA6B,aAAtD;AACH;AACJ;;AACD1B,QAAAA,YAAY,CAACiB,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAwF,CAEnG;;AACDhB,QAAAA,WAAW,GAAE;AACT,cAAG,KAAKQ,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,iBAAI,IAAIU,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKC,YAAL,CAAkBN,MAArC,EAA6CK,CAAC,EAA9C,EAAiD;AACjD,kBAAIE,QAAQ,GAAG,KAAKD,YAAL,CAAkBD,CAAlB,CAAf;AACA,kBAAIG,cAAc,GAAGpD,WAAW,CAACmD,QAAD,CAAhC;AACAC,cAAAA,cAAc,CAACC,MAAf,GAAwB,KAAKvB,IAAL,CAAUuB,MAAlC;AACAD,cAAAA,cAAc,CAACE,gBAAf,CAAgC,KAAKxB,IAAL,CAAUyB,aAA1C;AACC;AACJ;;AACD,cAAG,KAAKzB,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B;AACH;;AACD,cAAG,KAAKT,IAAL,CAAUS,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,iBAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKO,YAAL,CAAkBZ,MAAtC,EAA8CK,CAAC,EAA/C,EAAkD;AAC9C,mBAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,oBAAIN,QAAQ,GAAG,KAAKK,YAAL,CAAkBP,CAAlB,CAAf;AACA,oBAAIG,cAAc,GAAGpD,WAAW,CAACmD,QAAD,CAAhC;AACAC,gBAAAA,cAAc,CAACC,MAAf,GAAwB,KAAKvB,IAAL,CAAUuB,MAAlC;;AAEA,oBAAGF,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,KAAgCP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhC,IAAgEP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhE,IAAgGP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhG,IAAgIP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAnI,EAAgK;AAC5JN,kBAAAA,cAAc,CAACE,gBAAf,CAAgC,KAAKxB,IAAL,CAAUyB,aAAV,CAAwBI,CAAxB,GAA4B,GAA5D,EAAiE,KAAK7B,IAAL,CAAUyB,aAAV,CAAwBK,CAAxB,GAA4B,EAA7F,EAAiG,KAAK9B,IAAL,CAAUyB,aAAV,CAAwBM,CAAzH;AACH;;AACD,oBAAGV,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,KAAgCP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhC,IAAgEP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhE,IAAgGP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAhG,IAAgIP,QAAQ,CAACZ,IAAT,CAAcmB,QAAd,CAAuB,IAAvB,CAAnI,EAAgK;AAC5JN,kBAAAA,cAAc,CAACE,gBAAf,CAAgC,KAAKxB,IAAL,CAAUyB,aAAV,CAAwBI,CAAxB,GAA4B,GAA5D,EAAiE,KAAK7B,IAAL,CAAUyB,aAAV,CAAwBK,CAAxB,GAA4B,EAA7F,EAAiG,KAAK9B,IAAL,CAAUyB,aAAV,CAAwBM,CAAzH;AACH;AACJ;AACJ;AACJ;AACJ;;AACDlB,QAAAA,eAAe,GAAG;AACd,cAAI;AAAA;AAAA,oCAASG,QAAT,CAAkBC,SAAlB,CAA4B,CAA5B,CAAJ,EAAoC;AAChC;AAAA;AAAA,sCAASD,QAAT,CAAkBC,SAAlB,CAA4B,CAA5B,EAA+Be,QAA/B,GAA0C,KAAKpD,aAAL,GAAqB,KAAKD,SAApE;AACH;AACJ;;AA7G+B,O;;;;;iBAEC,E;;;;;;;iBAEA,E;;;;;;;iBAED,I;;gFAC/BJ,Q;;;;;iBACe,G","sourcesContent":["import { _decorator, Component, Node, Collider2D, Contact2DType, math, Vec3, tween, IPhysics2DContact, Prefab, instantiate, macro, Animation, Scene } from 'cc';\r\nimport { GameCtrl } from './GameCtrl';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Boss')\r\nexport class Boss extends Component {\r\n    @property(Prefab)\r\n    public listBulletB1: Prefab [] = [];\r\n    @property(Prefab)\r\n    public listBulletB3: Prefab [] = [];\r\n    @property(Animation)\r\n    public laserBullet: Animation = null;\r\n    @property\r\n    speed: number = 100;\r\n    public randomPosition;\r\n    public bulletCont = [];\r\n    public maxHealth: number = 100;\r\n    public currentHealth: number = 100;\r\n    listPos = [\r\n        new Vec3(590, 360),//turn 1, 3, 5, 7\r\n        new Vec3(690, 360),//turn 2\r\n    ];\r\n    start() {\r\n        let collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        }\r\n        this.moveRandom();\r\n        this.schedule(this.spawnBullet, 2.5, macro.REPEAT_FOREVER, 0);\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    moveRandom() {\r\n        const randomX = math.random() * (0 - 1000) + 500;\r\n        const randomY = math.random() * (200 - 600) + 200;\r\n        this.randomPosition = new Vec3(randomX, randomY);\r\n\r\n        const distance = Vec3.distance(this.node.position, this.randomPosition);\r\n        const duration = distance / this.speed;\r\n\r\n        tween(this.node)\r\n            .to(duration, { position: this.randomPosition })\r\n            .call(() => {\r\n                this.moveRandom();\r\n            })\r\n            .start();\r\n    }\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null){\r\n        if(otherCollider.node.name.startsWith('bullet') || otherCollider.node.name.startsWith('rocket')){\r\n            this.scheduleOnce(() => {this.bulletCont.push(otherCollider)});\r\n            if(this.node.name === 'boss001'){\r\n                this.currentHealth -= 2;\r\n                if (this.currentHealth <= 0) {\r\n                    this.currentHealth = 0;\r\n                }\r\n                this.updateHealthBar();\r\n                \r\n                if(this.bulletCont.length === 50){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                    GameCtrl.instance.healthBar[0].node.active = false;\r\n                }\r\n            }\r\n            if(this.node.name === 'boss002'){\r\n                if(this.bulletCont.length === 100){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                }\r\n            }\r\n            if(this.node.name === 'boss003'){\r\n                if(this.bulletCont.length === 150){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                }\r\n            }\r\n            this.scheduleOnce(() => {otherCollider.node.destroy()});\r\n        }\r\n    }\r\n    onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null){\r\n\r\n    }\r\n    spawnBullet(){\r\n        if(this.node.name === 'boss001'){\r\n            for(let i = 0; i < this.listBulletB1.length; i++){\r\n            let enemyPre = this.listBulletB1[i];\r\n            let prefabInstance = instantiate(enemyPre);\r\n            prefabInstance.parent = this.node.parent;\r\n            prefabInstance.setWorldPosition(this.node.worldPosition);\r\n            }\r\n        }\r\n        if(this.node.name === 'boss002'){\r\n            return;\r\n        }\r\n        if(this.node.name === 'boss003'){\r\n            for( let i = 0; i < this.listBulletB3.length; i++){\r\n                for(let j = 0; j < 5; j++){\r\n                    let enemyPre = this.listBulletB3[i];\r\n                    let prefabInstance = instantiate(enemyPre);\r\n                    prefabInstance.parent = this.node.parent;\r\n    \r\n                    if(enemyPre.name.endsWith('_0') || enemyPre.name.endsWith('_1') || enemyPre.name.endsWith('_2') || enemyPre.name.endsWith('_3') || enemyPre.name.endsWith('_4')){\r\n                        prefabInstance.setWorldPosition(this.node.worldPosition.x - 105, this.node.worldPosition.y - 65, this.node.worldPosition.z);\r\n                    }\r\n                    if(enemyPre.name.endsWith('_5') || enemyPre.name.endsWith('_6') || enemyPre.name.endsWith('_7') || enemyPre.name.endsWith('_8') || enemyPre.name.endsWith('_9')){\r\n                        prefabInstance.setWorldPosition(this.node.worldPosition.x + 105, this.node.worldPosition.y - 65, this.node.worldPosition.z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateHealthBar() {\r\n        if (GameCtrl.instance.healthBar[0]) {\r\n            GameCtrl.instance.healthBar[0].progress = this.currentHealth / this.maxHealth;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}