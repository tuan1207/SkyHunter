{"version":3,"sources":["file:///D:/Cocos%20Creator/Sky-Hunter/NewProject/assets/scripts/Boss.ts"],"names":["_decorator","Component","Collider2D","Contact2DType","math","Vec3","tween","Prefab","instantiate","macro","Animation","GameCtrl","Plane","AudioToggle","ccclass","property","Boss","randomPosition","bulletCont1","bulletCont2","bulletCont3","maxHealth1","currentHealth1","maxHealth2","currentHealth2","maxHealth3","currentHealth3","isMoving","duration","start","moveRandom","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","schedule","spawnBullet","REPEAT_FOREVER","onLoad","instance","update","deltaTime","node","to","position","call","console","log","setMoving","randomX","random","randomY","distance","speed","selfCollider","otherCollider","contact","onAudioQueue","name","startsWith","scheduleOnce","push","updateHealthBar","length","destroy","healthBar","active","checkTurn1","spawnEnabled","i","listBulletB1","enemyPre","prefabInstance","parent","setWorldPosition","worldPosition","listBulletB3","j","endsWith","x","y","z","progress"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,K,OAAAA,K;AAA0BC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,S,OAAAA,S;;AAC1HC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBf,U;;sBAGjBgB,I,WADZF,OAAO,CAAC,MAAD,C,UAGHC,QAAQ,CAACR,MAAD,C,UAERQ,QAAQ,CAACR,MAAD,C,UAERQ,QAAQ,CAACL,SAAD,C,sCAPb,MACaM,IADb,SAC0Bf,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAUzBgB,cAVyB;AAAA,eAWzBC,WAXyB,GAWX,EAXW;AAAA,eAYzBC,WAZyB,GAYX,EAZW;AAAA,eAazBC,WAbyB,GAaX,EAbW;AAAA,eAczBC,UAdyB,GAcJ,EAdI;AAAA,eAezBC,cAfyB,GAeA,EAfA;AAAA,eAgBzBC,UAhByB,GAgBJ,GAhBI;AAAA,eAiBzBC,cAjByB,GAiBA,GAjBA;AAAA,eAkBzBC,UAlByB,GAkBJ,GAlBI;AAAA,eAmBzBC,cAnByB,GAmBA,GAnBA;AAAA,eAoBzBC,QApByB,GAoBL,IApBK;AAAA,eAqBzBC,QArByB;AAAA;;AAsBhCC,QAAAA,KAAK,GAAG;AAAC,eAAKC,UAAL;AACL,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkB9B,UAAlB,CAAf;;AACA,cAAI6B,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAY9B,aAAa,CAAC+B,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D;AACAJ,YAAAA,QAAQ,CAACE,EAAT,CAAY9B,aAAa,CAACiC,WAA1B,EAAuC,KAAKC,YAA5C,EAA0D,IAA1D;AACH,WALG,CAMJ;;;AACA,eAAKC,QAAL,CAAc,KAAKC,WAAnB,EAAgC,GAAhC,EAAqC9B,KAAK,CAAC+B,cAA3C,EAA2D,CAA3D;AACH;;AACSC,QAAAA,MAAM,GAAS;AACrBzB,UAAAA,IAAI,CAAC0B,QAAL,GAAgB,IAAhB;AACH;;AACDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAI,CAAC,KAAKjB,QAAV,EAAoB;AAChB;AACH;;AACDrB,UAAAA,KAAK,CAAC,KAAKuC,IAAN,CAAL,CACKC,EADL,CACQ,KAAKlB,QADb,EACuB;AAAEmB,YAAAA,QAAQ,EAAE,KAAK9B;AAAjB,WADvB,EAEK+B,IAFL,CAEU,MAAM;AACR,iBAAKlB,UAAL;AACAmB,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAFQ,CAEW;AACtB,WALL,EAMKrB,KANL;AAOH,SA7C+B,CA8ChC;;;AACAsB,QAAAA,SAAS,CAACxB,QAAD,EAAoB;AACzB,eAAKA,QAAL,GAAgBA,QAAhB;AACH,SAjD+B,CAmDhC;;;AACAG,QAAAA,UAAU,GAAG;AACT,cAAI,CAAC,KAAKH,QAAV,EAAoB;AAChB,mBADgB,CACR;AACX;;AAED,cAAMyB,OAAO,GAAGhD,IAAI,CAACiD,MAAL,MAAiB,IAAI,IAArB,IAA6B,GAA7C;AACA,cAAMC,OAAO,GAAGlD,IAAI,CAACiD,MAAL,MAAiB,MAAM,GAAvB,IAA8B,GAA9C;AACA,cAAMpC,cAAc,GAAG,IAAIZ,IAAJ,CAAS+C,OAAT,EAAkBE,OAAlB,CAAvB;AAEA,cAAMC,QAAQ,GAAGlD,IAAI,CAACkD,QAAL,CAAc,KAAKV,IAAL,CAAUE,QAAxB,EAAkC9B,cAAlC,CAAjB;AACA,eAAKW,QAAL,GAAgB2B,QAAQ,GAAG,KAAKC,KAAhC,CAVS,CAYT;AACA;AACA;AACA;AACA;AACA;AACH;;AACDrB,QAAAA,cAAc,CAACsB,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAwF;AAClG;AAAA;AAAA,0CAAYjB,QAAZ,CAAqBkB,YAArB,CAAkC,CAAlC;;AAEA,cAAGF,aAAa,CAACb,IAAd,CAAmBgB,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,KAAgDJ,aAAa,CAACb,IAAd,CAAmBgB,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,CAAnD,EAAgG;AAC5F,gBAAG,KAAKjB,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,mBAAKE,YAAL,CAAkB,MAAM;AAAC,qBAAK7C,WAAL,CAAiB8C,IAAjB,CAAsBN,aAAtB;AAAqC,eAA9D;AACA,mBAAKpC,cAAL,IAAuB,CAAvB;;AACA,kBAAI,KAAKA,cAAL,IAAuB,CAA3B,EAA8B;AAC1B,qBAAKA,cAAL,GAAsB,CAAtB;AACH;;AACD,mBAAK2C,eAAL;;AACA,kBAAG,KAAK/C,WAAL,CAAiBgD,MAAjB,IAA2B,EAA9B,EAAiC;AAC7B,qBAAKH,YAAL,CAAkB,MAAM;AAACN,kBAAAA,YAAY,CAACZ,IAAb,CAAkBsB,OAAlB;AAA4B,iBAArD;AACA;AAAA;AAAA,0CAASzB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BvB,IAA/B,CAAoCwB,MAApC,GAA6C,KAA7C;AACH;AACJ;;AACD,gBAAG,KAAKxB,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,mBAAKE,YAAL,CAAkB,MAAM;AAAC,qBAAK5C,WAAL,CAAiB6C,IAAjB,CAAsBN,aAAtB;AAAqC,eAA9D;AACA,mBAAKlC,cAAL,IAAuB,CAAvB;;AACA,kBAAI,KAAKA,cAAL,IAAuB,CAA3B,EAA8B;AAC1B,qBAAKA,cAAL,GAAsB,CAAtB;AACH;;AACD,mBAAKyC,eAAL;;AACA,kBAAG,KAAK9C,WAAL,CAAiB+C,MAAjB,IAA2B,GAA9B,EAAkC;AAC9B,qBAAKH,YAAL,CAAkB,MAAM;AAACN,kBAAAA,YAAY,CAACZ,IAAb,CAAkBsB,OAAlB;AAA4B,iBAArD;AACA;AAAA;AAAA,0CAASzB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BvB,IAA/B,CAAoCwB,MAApC,GAA6C,KAA7C;AACH;AACJ;;AACD,gBAAG,KAAKxB,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,mBAAKE,YAAL,CAAkB,MAAM;AAAC,qBAAK3C,WAAL,CAAiB4C,IAAjB,CAAsBN,aAAtB;AAAqC,eAA9D;AACA,mBAAKhC,cAAL,IAAuB,CAAvB;;AACA,kBAAI,KAAKA,cAAL,IAAuB,CAA3B,EAA8B;AAC1B,qBAAKA,cAAL,GAAsB,CAAtB;AACH;;AACD,mBAAKuC,eAAL;;AACA,kBAAG,KAAK7C,WAAL,CAAiB8C,MAAjB,IAA2B,GAA9B,EAAkC;AAC9B,qBAAKH,YAAL,CAAkB,MAAM;AAACN,kBAAAA,YAAY,CAACZ,IAAb,CAAkBsB,OAAlB;AAA4B,iBAArD;AACA;AAAA;AAAA,0CAASzB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BvB,IAA/B,CAAoCwB,MAApC,GAA6C,KAA7C;AACA,qBAAKN,YAAL,CAAkB,MAAM;AAAC;AAAA;AAAA,4CAASrB,QAAT,CAAkB4B,UAAlB,GAA+B,IAA/B;AAAoC,iBAA7D;AACH;AACJ;;AACD,gBAAGZ,aAAa,CAACb,IAAd,CAAmBgB,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,KAAgDJ,aAAa,CAACb,IAAd,CAAmBgB,IAAnB,CAAwBC,UAAxB,CAAmC,QAAnC,CAAnD,EAAgG;AAC5F,mBAAKC,YAAL,CAAkB,MAAM;AAAA;;AAAC,uCAAAL,aAAa,CAACb,IAAd,yCAAoBsB,OAApB;AAA8B,eAAvD;AACH;AAEJ;AACJ;;AACD9B,QAAAA,YAAY,CAACoB,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAwF,CAEnG;;AACDpB,QAAAA,WAAW,GAAE;AACT,cAAG,CAAC;AAAA;AAAA,8BAAMG,QAAN,CAAe6B,YAAnB,EAAiC;;AACjC,cAAG,KAAK1B,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,iBAAI,IAAIW,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKC,YAAL,CAAkBP,MAArC,EAA6CM,CAAC,EAA9C,EAAiD;AACjD,kBAAIE,QAAQ,GAAG,KAAKD,YAAL,CAAkBD,CAAlB,CAAf;AACA,kBAAIG,cAAc,GAAGnE,WAAW,CAACkE,QAAD,CAAhC;AACAC,cAAAA,cAAc,CAACC,MAAf,GAAwB,KAAK/B,IAAL,CAAU+B,MAAlC;AACAD,cAAAA,cAAc,CAACE,gBAAf,CAAgC,KAAKhC,IAAL,CAAUiC,aAA1C;AACC;AACJ;;AACD,cAAG,KAAKjC,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B;AACH;;AACD,cAAG,KAAKhB,IAAL,CAAUgB,IAAV,KAAmB,SAAtB,EAAgC;AAC5B,iBAAK,IAAIW,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,KAAKO,YAAL,CAAkBb,MAAtC,EAA8CM,EAAC,EAA/C,EAAkD;AAC9C,mBAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,oBAAIN,SAAQ,GAAG,KAAKK,YAAL,CAAkBP,EAAlB,CAAf;;AACA,oBAAIG,eAAc,GAAGnE,WAAW,CAACkE,SAAD,CAAhC;;AACAC,gBAAAA,eAAc,CAACC,MAAf,GAAwB,KAAK/B,IAAL,CAAU+B,MAAlC;;AAEA,oBAAGF,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,KAAgCP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhC,IAAgEP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhE,IAAgGP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhG,IAAgIP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAnI,EAAgK;AAC5JN,kBAAAA,eAAc,CAACE,gBAAf,CAAgC,KAAKhC,IAAL,CAAUiC,aAAV,CAAwBI,CAAxB,GAA4B,GAA5D,EAAiE,KAAKrC,IAAL,CAAUiC,aAAV,CAAwBK,CAAxB,GAA4B,EAA7F,EAAiG,KAAKtC,IAAL,CAAUiC,aAAV,CAAwBM,CAAzH;AACH;;AACD,oBAAGV,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,KAAgCP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhC,IAAgEP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhE,IAAgGP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAhG,IAAgIP,SAAQ,CAACb,IAAT,CAAcoB,QAAd,CAAuB,IAAvB,CAAnI,EAAgK;AAC5JN,kBAAAA,eAAc,CAACE,gBAAf,CAAgC,KAAKhC,IAAL,CAAUiC,aAAV,CAAwBI,CAAxB,GAA4B,GAA5D,EAAiE,KAAKrC,IAAL,CAAUiC,aAAV,CAAwBK,CAAxB,GAA4B,EAA7F,EAAiG,KAAKtC,IAAL,CAAUiC,aAAV,CAAwBM,CAAzH;AACH;AACJ;AACJ;AACJ;AACJ;;AACDnB,QAAAA,eAAe,GAAG;AACd,cAAI;AAAA;AAAA,oCAASvB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,CAAJ,EAAoC;AAChC;AAAA;AAAA,sCAAS1B,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BiB,QAA/B,GAA0C,KAAK/D,cAAL,GAAsB,KAAKD,UAArE;AACH;;AAAA,cAAI;AAAA;AAAA,oCAASqB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,CAAJ,EAAoC;AACjC;AAAA;AAAA,sCAAS1B,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BiB,QAA/B,GAA0C,KAAK7D,cAAL,GAAsB,KAAKD,UAArE;AACH;;AAAA,cAAI;AAAA;AAAA,oCAASmB,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,CAAJ,EAAoC;AACjC;AAAA;AAAA,sCAAS1B,QAAT,CAAkB0B,SAAlB,CAA4B,CAA5B,EAA+BiB,QAA/B,GAA0C,KAAK3D,cAAL,GAAsB,KAAKD,UAArE;AACH;AACJ;;AA/J+B,O,UACzBiB,Q;;;;;iBAE0B,E;;;;;;;iBAEA,E;;;;;;;iBAED,I;;gFAC/B3B,Q;;;;;iBACe,G","sourcesContent":["import { _decorator, Component, Node, Collider2D, Contact2DType, math, Vec3, tween, IPhysics2DContact, Prefab, instantiate, macro, Animation, Scene } from 'cc';\r\nimport { GameCtrl } from './GameCtrl';\r\nimport { Plane } from './Plane';\r\nimport { AudioToggle } from './AudioToggle';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Boss')\r\nexport class Boss extends Component {\r\n    static instance: Boss;\r\n    @property(Prefab)\r\n    public listBulletB1: Prefab [] = [];\r\n    @property(Prefab)\r\n    public listBulletB3: Prefab [] = [];\r\n    @property(Animation)\r\n    public laserBullet: Animation = null;\r\n    @property\r\n    speed: number = 100;\r\n    public randomPosition;\r\n    public bulletCont1 = [];\r\n    public bulletCont2 = [];\r\n    public bulletCont3 = [];\r\n    public maxHealth1: number = 50;\r\n    public currentHealth1: number = 50;\r\n    public maxHealth2: number = 100;\r\n    public currentHealth2: number = 100;\r\n    public maxHealth3: number = 150;\r\n    public currentHealth3: number = 150;  \r\n    public isMoving: boolean = true;\r\n    public duration;\r\n    start() {this.moveRandom();\r\n        let collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        }\r\n        // this.moveRandom();\r\n        this.schedule(this.spawnBullet, 2.5, macro.REPEAT_FOREVER, 0);\r\n    }\r\n    protected onLoad(): void {\r\n        Boss.instance = this;\r\n    }\r\n    update(deltaTime: number) {\r\n        if (!this.isMoving) {\r\n            return;\r\n        }\r\n        tween(this.node)\r\n            .to(this.duration, { position: this.randomPosition })\r\n            .call(() => {\r\n                this.moveRandom();\r\n                console.log('10'); // Gọi lại moveRandom() để di chuyển đến vị trí mới sau khi hoàn thành tween\r\n            })\r\n            .start();\r\n    }\r\n    // Phương thức để thiết lập trạng thái di chuyển của quái vật\r\n    setMoving(isMoving: boolean) {\r\n        this.isMoving = isMoving;\r\n    }\r\n\r\n    // Phương thức để quái vật di chuyển đến một vị trí ngẫu nhiên\r\n    moveRandom() {\r\n        if (!this.isMoving) {\r\n            return; // Nếu không cần di chuyển thì dừng lại\r\n        }\r\n\r\n        const randomX = math.random() * (0 - 1000) + 500;\r\n        const randomY = math.random() * (200 - 600) + 200;\r\n        const randomPosition = new Vec3(randomX, randomY);\r\n\r\n        const distance = Vec3.distance(this.node.position, randomPosition);\r\n        this.duration = distance / this.speed;\r\n\r\n        // tween(this.node)\r\n        //     .to(duration, { position: randomPosition })\r\n        //     .call(() => {\r\n        //         this.moveRandom(); // Gọi lại moveRandom() để di chuyển đến vị trí mới sau khi hoàn thành tween\r\n        //     })\r\n        //     .start();\r\n    }\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null){\r\n        AudioToggle.instance.onAudioQueue(7);\r\n\r\n        if(otherCollider.node.name.startsWith('bullet') || otherCollider.node.name.startsWith('rocket')){\r\n            if(this.node.name === 'boss001'){\r\n                this.scheduleOnce(() => {this.bulletCont1.push(otherCollider)});\r\n                this.currentHealth1 -= 1;\r\n                if (this.currentHealth1 <= 0) {\r\n                    this.currentHealth1 = 0;\r\n                }\r\n                this.updateHealthBar();\r\n                if(this.bulletCont1.length >= 50){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                    GameCtrl.instance.healthBar[0].node.active = false;\r\n                }\r\n            }\r\n            if(this.node.name === 'boss002'){\r\n                this.scheduleOnce(() => {this.bulletCont2.push(otherCollider)});\r\n                this.currentHealth2 -= 1;\r\n                if (this.currentHealth2 <= 0) {\r\n                    this.currentHealth2 = 0;\r\n                }\r\n                this.updateHealthBar();\r\n                if(this.bulletCont2.length >= 100){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                    GameCtrl.instance.healthBar[1].node.active = false;\r\n                }\r\n            }\r\n            if(this.node.name === 'boss003'){\r\n                this.scheduleOnce(() => {this.bulletCont3.push(otherCollider)});\r\n                this.currentHealth3 -= 1;\r\n                if (this.currentHealth3 <= 0) {\r\n                    this.currentHealth3 = 0;\r\n                }\r\n                this.updateHealthBar();\r\n                if(this.bulletCont3.length >= 150){\r\n                    this.scheduleOnce(() => {selfCollider.node.destroy()});\r\n                    GameCtrl.instance.healthBar[2].node.active = false;\r\n                    this.scheduleOnce(() => {GameCtrl.instance.checkTurn1 = true});\r\n                }\r\n            }\r\n            if(otherCollider.node.name.startsWith('bullet') || otherCollider.node.name.startsWith('rocket')){\r\n                this.scheduleOnce(() => {otherCollider.node?.destroy()});\r\n            }\r\n            \r\n        }\r\n    }\r\n    onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null){\r\n\r\n    }\r\n    spawnBullet(){\r\n        if(!Plane.instance.spawnEnabled) return;\r\n        if(this.node.name === 'boss001'){\r\n            for(let i = 0; i < this.listBulletB1.length; i++){\r\n            let enemyPre = this.listBulletB1[i];\r\n            let prefabInstance = instantiate(enemyPre);\r\n            prefabInstance.parent = this.node.parent;\r\n            prefabInstance.setWorldPosition(this.node.worldPosition);\r\n            }\r\n        }\r\n        if(this.node.name === 'boss002'){\r\n            return;\r\n        }\r\n        if(this.node.name === 'boss003'){\r\n            for( let i = 0; i < this.listBulletB3.length; i++){\r\n                for(let j = 0; j < 5; j++){\r\n                    let enemyPre = this.listBulletB3[i];\r\n                    let prefabInstance = instantiate(enemyPre);\r\n                    prefabInstance.parent = this.node.parent;\r\n    \r\n                    if(enemyPre.name.endsWith('_0') || enemyPre.name.endsWith('_1') || enemyPre.name.endsWith('_2') || enemyPre.name.endsWith('_3') || enemyPre.name.endsWith('_4')){\r\n                        prefabInstance.setWorldPosition(this.node.worldPosition.x - 105, this.node.worldPosition.y - 65, this.node.worldPosition.z);\r\n                    }\r\n                    if(enemyPre.name.endsWith('_5') || enemyPre.name.endsWith('_6') || enemyPre.name.endsWith('_7') || enemyPre.name.endsWith('_8') || enemyPre.name.endsWith('_9')){\r\n                        prefabInstance.setWorldPosition(this.node.worldPosition.x + 105, this.node.worldPosition.y - 65, this.node.worldPosition.z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateHealthBar() {\r\n        if (GameCtrl.instance.healthBar[0]) {\r\n            GameCtrl.instance.healthBar[0].progress = this.currentHealth1 / this.maxHealth1;\r\n        }if (GameCtrl.instance.healthBar[1]) {\r\n            GameCtrl.instance.healthBar[1].progress = this.currentHealth2 / this.maxHealth2;\r\n        }if (GameCtrl.instance.healthBar[2]) {\r\n            GameCtrl.instance.healthBar[2].progress = this.currentHealth3 / this.maxHealth3;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}