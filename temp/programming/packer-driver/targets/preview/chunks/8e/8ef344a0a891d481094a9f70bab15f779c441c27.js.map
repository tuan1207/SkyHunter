{"version":3,"sources":["file:///D:/Cocos%20Creator/Sky-Hunter/NewProject/assets/scripts/GameCtrl.ts"],"names":["_decorator","Component","Prefab","instantiate","macro","ccclass","property","GameCtrl","spawnFunc1","start","spawn","update","deltaTime","randomWave1","availableFunctions","reduce","acc","spawned","index","push","length","randomIndex","Math","floor","random","i","enemyWave1","schedule","turnSpawn","REPEAT_FOREVER","console","log","j","enemyPre","prefabInstance","parent","node","offsetX","offsetY","setWorldPosition","worldPosition","x","y","z"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, Vec3, instantiate, macro } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameCtrl')\r\nexport class GameCtrl extends Component {\r\n    @property(Prefab)\r\n    public enemyWave1: Prefab [] = [];\r\n    @property(Prefab)\r\n    public enemyWave2: Prefab [] = [];\r\n    @property(Prefab)\r\n    public enemyWave3: Prefab [] = [];\r\n    public spawnFunc1 = [false, false, false, false, false, false, false, false, false, false];\r\n\r\n    start() {\r\n        this.spawn();\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n    \r\n    randomWave1(){\r\n        let availableFunctions = this.spawnFunc1.reduce((acc, spawned, index) => {\r\n            if (!spawned) acc.push(index);\r\n            return acc;\r\n        }, []);\r\n\r\n        if(availableFunctions.length === 0) return;\r\n\r\n        let randomIndex = availableFunctions[Math.floor(Math.random() * availableFunctions.length)];\r\n\r\n        this.spawnFunc1[randomIndex]  = true;\r\n\r\n        switch(randomIndex){\r\n            case 1:\r\n                \r\n                break;\r\n            // case 2:\r\n            //     break;\r\n            // case 3:\r\n            //     break;\r\n            // case 4:\r\n            //     break;\r\n            // case 5:\r\n            //     break;\r\n            // case 6:\r\n            //     break;\r\n            // case 7:\r\n            //     break;\r\n            // case 8:\r\n            //     break;\r\n            // case 9:\r\n            //     break;\r\n            // case 0:\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    spawn(){\r\n        for(let i = 0; i < this.enemyWave1.length; i++){\r\n            this.schedule(this.turnSpawn, 7, macro.REPEAT_FOREVER, 0);\r\n        }\r\n    }\r\n\r\n    turnSpawn(){\r\n        console.log('da spawn');\r\n        for(let j = 0; j < 5; j++){\r\n                let enemyPre = this.enemyWave1[j];\r\n                let prefabInstance = instantiate(enemyPre);\r\n                prefabInstance.parent = this.node.parent;\r\n        \r\n                // Tính toán vị trí mới cho mỗi prefabInstance\r\n                let offsetX = 120 * (j - 2); // Điều chỉnh khoảng cách giữa các vật thể\r\n                let offsetY = 60 * j; // Điều chỉnh khoảng cách giữa các hàng của các vật thể\r\n                prefabInstance.setWorldPosition(this.node.worldPosition.x + offsetX, this.node.worldPosition.y + 60, this.node.worldPosition.z);\r\n                \r\n            }\r\n    }\r\n}\r\n\r\n\r\n"]}